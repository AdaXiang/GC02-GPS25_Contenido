/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.75).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Cancion;
import io.swagger.model.ErrorResponse;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2025-10-27T17:33:52.662194674Z[GMT]")
@Validated
public interface CancionesApi {

    @Operation(summary = "Obtener canciones de un álbum", description = "Devuelve todas las canciones que pertenecen al álbum con el ID proporcionado.", tags={ "Canciones album" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Lista de canciones del álbum obtenida correctamente.", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Cancion.class)))),
        
        @ApiResponse(responseCode = "404", description = "No se encontró un álbum con el ID indicado.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno del servidor.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))) })
    @RequestMapping(value = "/canciones/album/{idAlbum}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Cancion>> cancionesAlbumIdAlbumGet(@Parameter(in = ParameterIn.PATH, description = "ID del álbum cuyas canciones se desean consultar", required=true, schema=@Schema()) @PathVariable("idAlbum") Integer idAlbum
);


    @Operation(summary = "Obtener canciones por artista", description = "Devuelve todas las canciones que pertenecen al artista con el ID proporcionado.", tags={ "Canciones artista" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Lista de canciones del artista obtenida correctamente.", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Cancion.class)))),
        
        @ApiResponse(responseCode = "404", description = "No se encontró un artista con el ID indicado.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno del servidor.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))) })
    @RequestMapping(value = "/canciones/artista/{idArtista}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Cancion>> cancionesArtistaIdArtistaGet(@Parameter(in = ParameterIn.PATH, description = "ID del artista cuyas canciones se desean consultar", required=true, schema=@Schema()) @PathVariable("idArtista") Integer idArtista
);


    @Operation(summary = "Obtener canciones por género", description = "Devuelve todas las canciones que pertenecen al género con el ID proporcionado.", tags={ "Canciones genero" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Lista de canciones del género obtenida correctamente.", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Cancion.class)))),
        
        @ApiResponse(responseCode = "404", description = "No se encontró un género con el ID indicado.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno del servidor.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))) })
    @RequestMapping(value = "/canciones/genero/{idGenero}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Cancion>> cancionesGeneroIdGeneroGet(@Parameter(in = ParameterIn.PATH, description = "ID del género cuyas canciones se desean consultar", required=true, schema=@Schema()) @PathVariable("idGenero") Integer idGenero
);


    @Operation(summary = "Obtener canciones", description = "Devuelve todas las canciones disponibles", tags={ "Canciones" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Lista de canciones obtenida correctamente", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Cancion.class)))),
        
        @ApiResponse(responseCode = "500", description = "Error interno del servido", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))) })
    @RequestMapping(value = "/canciones",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Cancion>> cancionesGet(@Parameter(in = ParameterIn.QUERY, description = "ID del álbum al que pertenece la canción" ,schema=@Schema()) @Valid @RequestParam(value = "idAlbum", required = false) Integer idAlbum
, @Parameter(in = ParameterIn.QUERY, description = "Nombre de la canción" ,schema=@Schema()) @Valid @RequestParam(value = "nombre", required = false) String nombre
);


    @Operation(summary = "Crear una nueva canción", description = "Inserta un nuevo registro en la tabla de canciones.", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "Canciones" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Canción creada correctamente.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Cancion.class))),
        
        @ApiResponse(responseCode = "400", description = "Error en los datos enviados.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "401", description = "Token inválido o no autorizado", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "409", description = "Conflicto — la canción ya existe.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno del servidor", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))) })
    @RequestMapping(value = "/canciones",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Cancion> cancionesPost(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody Cancion body
);

}

