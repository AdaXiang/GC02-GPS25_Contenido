/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.75).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Cancion;
import io.swagger.model.ErrorResponse;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2025-10-27T17:33:52.662194674Z[GMT]")
@Validated
public interface CancionesidCancionApi {

    @Operation(summary = "Eliminar una canción por ID", description = "Borra una canción de la base de datos según su ID.", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "Canciones" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Canción eliminada correctamente."),
        
        @ApiResponse(responseCode = "401", description = "Token inválido o usuario no autorizado", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "404", description = "Canción no encontrada.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno del servidor", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))) })
    @RequestMapping(value = "/canciones{idCancion}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> cancionesidCancionDelete(@Parameter(in = ParameterIn.PATH, description = "ID de la canción a eliminar.", required=true, schema=@Schema()) @PathVariable("idCancion") Integer idCancion
);


    @Operation(summary = "Obtener una canción por ID", description = "Devuelve la canción correspondiente al ID proporcionado.", tags={ "Canciones" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Canción encontrada correctamente.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Cancion.class))),
        
        @ApiResponse(responseCode = "404", description = "No se encontró la canción con el ID indicado.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))) })
    @RequestMapping(value = "/canciones{idCancion}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Cancion> cancionesidCancionGet(@Parameter(in = ParameterIn.PATH, description = "ID de la canción a consultar", required=true, schema=@Schema()) @PathVariable("idCancion") Integer idCancion
);


    @Operation(summary = "Actualizar una canción por ID", description = "Modifica los datos de una canción existente.", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "Canciones" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Canción actualizada correctamente.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Cancion.class))),
        
        @ApiResponse(responseCode = "401", description = "Token inválido o no autorizado", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "404", description = "Canción no encontrada.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno del servidor", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))) })
    @RequestMapping(value = "/canciones{idCancion}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Cancion> cancionesidCancionPut(@Parameter(in = ParameterIn.PATH, description = "ID de la canción a actualizar.", required=true, schema=@Schema()) @PathVariable("idCancion") Integer idCancion
, @Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody Cancion body
);

}

