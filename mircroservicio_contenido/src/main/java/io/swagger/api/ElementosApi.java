/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.75).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Elemento;
import io.swagger.model.ElementoInput;
import io.swagger.model.ErrorResponse;
import org.threeten.bp.LocalDate;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2025-10-27T17:33:52.662194674Z[GMT]")
@Validated
public interface ElementosApi {

    @Operation(summary = "Obtener contenido disponible", description = "Devuelve todo el contenido disponible (álbumes y canciones) en formato JSON.   Permite aplicar filtros opcionales por género, subgénero, precio mínimo/máximo y fecha mínima/máxima. ", tags={ "Elementos" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Lista de contenidos obtenida correctamente.", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Elemento.class)))),
        
        @ApiResponse(responseCode = "400", description = "Datos inválidos en la solicitud.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno del servidor.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))) })
    @RequestMapping(value = "/elementos",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Elemento>> elementosGet(@Parameter(in = ParameterIn.QUERY, description = "ID del género por el que se desea filtrar." ,schema=@Schema()) @Valid @RequestParam(value = "genero", required = false) Integer genero
, @Parameter(in = ParameterIn.QUERY, description = "ID del subgénero por el que se desea filtrar." ,schema=@Schema()) @Valid @RequestParam(value = "subgenero", required = false) Integer subgenero
, @Parameter(in = ParameterIn.QUERY, description = "Precio mínimo del contenido." ,schema=@Schema()) @Valid @RequestParam(value = "preciomin", required = false) Float preciomin
, @Parameter(in = ParameterIn.QUERY, description = "Precio máximo del contenido." ,schema=@Schema()) @Valid @RequestParam(value = "preciomax", required = false) Float preciomax
, @Parameter(in = ParameterIn.QUERY, description = "Fecha mínima de creación o publicación." ,schema=@Schema()) @Valid @RequestParam(value = "fechamin", required = false) LocalDate fechamin
, @Parameter(in = ParameterIn.QUERY, description = "Fecha máxima de creación o publicación." ,schema=@Schema()) @Valid @RequestParam(value = "fechamax", required = false) LocalDate fechamax
);


    @Operation(summary = "Eliminar un contenido por ID", description = "Borra un contenido existente del sistema.", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "Elementos" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Contenido eliminado correctamente (sin cuerpo de respuesta)."),
        
        @ApiResponse(responseCode = "401", description = "Token inválido o usuario no autorizado", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "404", description = "No se encontró un contenido con el ID indicado.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno del servidor.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))) })
    @RequestMapping(value = "/elementos/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> elementosIdDelete(@Parameter(in = ParameterIn.PATH, description = "ID del contenido que se desea eliminar", required=true, schema=@Schema()) @PathVariable("id") Integer id
);


    @Operation(summary = "Obtener un contenido por ID", description = "Devuelve el contenido correspondiente al ID proporcionado.", tags={ "Elementos" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Contenido encontrado correctamente.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Elemento.class))),
        
        @ApiResponse(responseCode = "404", description = "No se encontró un contenido con el ID indicado.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno del servidor.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))) })
    @RequestMapping(value = "/elementos/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Elemento> elementosIdGet(@Parameter(in = ParameterIn.PATH, description = "ID del contenido a consultar", required=true, schema=@Schema()) @PathVariable("id") Integer id
);


    @Operation(summary = "Crear un nuevo elemento", description = "Registra un nuevo elemento en la base de datos.", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "Elementos" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Elemento creado correctamente.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Elemento.class))),
        
        @ApiResponse(responseCode = "400", description = "Datos de entrada inválidos.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "401", description = "Token inválido o no autorizado", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno al crear el elemento.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))) })
    @RequestMapping(value = "/elementos",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Elemento> elementosPost(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody ElementoInput body
);


    @Operation(summary = "Actualizar un contenido existente", description = "Modifica los datos de un contenido. El ID se toma del cuerpo de la petición.", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "Elementos" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Contenido actualizado correctamente.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Elemento.class))),
        
        @ApiResponse(responseCode = "400", description = "Datos inválidos o ID no especificado.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "404", description = "No se encontró un contenido con el ID indicado.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno del servidor.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))) })
    @RequestMapping(value = "/elementos",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Elemento> elementosPut(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody Elemento body
);

}

