/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.75).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.ErrorResponse;
import io.swagger.model.Genero;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2025-10-27T17:33:52.662194674Z[GMT]")
@Validated
public interface GenerosApi {

    @Operation(summary = "Obtener géneros", description = "Devuelve todos los géneros disponibles", tags={ "Generos" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Lista de géneros obtenida correctamente", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Genero.class)))),
        
        @ApiResponse(responseCode = "500", description = "Error interno del servidor.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))) })
    @RequestMapping(value = "/generos",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Genero>> generosGet(@Parameter(in = ParameterIn.QUERY, description = "ID del género" ,schema=@Schema()) @Valid @RequestParam(value = "idGenero", required = false) Integer idGenero
, @Parameter(in = ParameterIn.QUERY, description = "Nombre del género" ,schema=@Schema()) @Valid @RequestParam(value = "nombre", required = false) String nombre
);


    @Operation(summary = "Eliminar un género por ID", description = "Borra un género de la base de datos según su ID.", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "Generos" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Género eliminado correctamente."),
        
        @ApiResponse(responseCode = "401", description = "Token inválido o usuario no autorizado", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "404", description = "Género no encontrado.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno del servidor", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))) })
    @RequestMapping(value = "/generos/{idGenero}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> generosIdGeneroDelete(@Parameter(in = ParameterIn.PATH, description = "ID del género a eliminar.", required=true, schema=@Schema()) @PathVariable("idGenero") Integer idGenero
);


    @Operation(summary = "Obtener un contenido por ID", description = "Devuelve el contenido correspondiente al ID proporcionado.", tags={ "Generos" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Contenido encontrado correctamente.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Genero.class))),
        
        @ApiResponse(responseCode = "404", description = "No se encontró el género con el ID indicado.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno del servidor.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))) })
    @RequestMapping(value = "/generos/{idGenero}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Genero> generosIdGeneroGet(@Parameter(in = ParameterIn.PATH, description = "ID del género a consultar", required=true, schema=@Schema()) @PathVariable("idGenero") Integer idGenero
);


    @Operation(summary = "Actualizar un género por ID", description = "Modifica los datos de un género existente.", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "Generos" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Género actualizado correctamente.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Genero.class))),
        
        @ApiResponse(responseCode = "401", description = "Token inválido o no autorizado", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "404", description = "Género no encontrado.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno del servidor", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))) })
    @RequestMapping(value = "/generos/{idGenero}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Genero> generosIdGeneroPut(@Parameter(in = ParameterIn.PATH, description = "ID del género a actualizar.", required=true, schema=@Schema()) @PathVariable("idGenero") Integer idGenero
, @Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody Genero body
);


    @Operation(summary = "Crear un nuevo género", description = "Inserta un nuevo registro en la tabla de géneros.", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "Generos" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Género creado correctamente.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Genero.class))),
        
        @ApiResponse(responseCode = "400", description = "Error en los datos enviados.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "401", description = "Token inválido o no autorizado", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "409", description = "Conflicto — el género ya existe.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno del servidor", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))) })
    @RequestMapping(value = "/generos",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Genero> generosPost(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody Genero body
);

}

